@inject IManager manager
@inject IJSRuntime js

<RadzenFieldset Text="Jornada laboral Medico">
    <div class="row">
        <div class="col-md-4">
            <RadzenLabel Text="Hora Entrada" />
            <RadzenDropDown @bind-Value="@(configuracionConsulta.HoraEntrada)" Data=@HorasDelDia />
        </div>

        <div class="col-md-4">
            <RadzenLabel Text="Hora Salida" />
            <RadzenDropDown @bind-Value="@(configuracionConsulta.HoraSalida)" Data=@HorasDelDia
                            Disabled="@(configuracionConsulta.HoraEntrada == new TimeSpan())" />
        </div>

        <div class="col-md-4">
            <RadzenLabel Text="Duracion de las consultas" />
            <RadzenDropDown @bind-Value="@(configuracionConsulta.DuracionConsultas)" Data=@TiemposConsulta
                            Disabled="@(configuracionConsulta.HoraEntrada == new TimeSpan() || configuracionConsulta.HoraEntrada == new TimeSpan())"
                            Change="MostrarListaDePosiblesHorariosDisponibles" />
        </div>

    </div>

    <br />

    <div class="row">
        @if (ConsultasPorMedico != new List<ConsultasPorMedico>())
        {
            <div class="col-md-4">
                <p>Desmarque las casillas que no estan disponibles para consultas</p>
                <ul class="list-group">
                    @foreach (var horario in ConsultasPorMedico)
                    {
                        <li class="list-group-item">
                            <input class="form-check-input me-1" type="checkbox" aria-label="..." @onchange="eventArgs => { CheckboxClicked(horario.HoraInicioCita, eventArgs.Value); }" checked="@(!horario.EstaOcupado)">
                            @($"{horario.HoraInicioCita} - {horario.HoraFinCita} ")
                        </li>
                    }
                </ul>
            </div>
            <div class="col-2">
                <RadzenButton ButtonType="ButtonType.Button" Text="Guardar" class="w-100" ButtonStyle="ButtonStyle.Primary" Click="GuardarJornadaLaboral" />
            </div>
        }
    </div>
</RadzenFieldset>

@code
{
    [Parameter] public long UsuarioId { get; set; }

    [Parameter] public ConfiguracionConsulta configuracionConsulta { get; set; } = new ConfiguracionConsulta();

    [Parameter] public List<ConsultasPorMedico> ConsultasPorMedico { get; set; } = new List<ConsultasPorMedico>();

    List<TimeSpan> HorasDelDia = new List<TimeSpan>()
    {
        new TimeSpan(00, 00, 00),
        new TimeSpan(01, 00, 00),
        new TimeSpan(02, 00, 00),
        new TimeSpan(03, 00, 00),
        new TimeSpan(04, 00, 00),
        new TimeSpan(05, 00, 00),
        new TimeSpan(06, 00, 00),
        new TimeSpan(07, 00, 00),
        new TimeSpan(08, 00, 00),
        new TimeSpan(09, 00, 00),
        new TimeSpan(10, 00, 00),
        new TimeSpan(11, 00, 00),
        new TimeSpan(12, 00, 00),
        new TimeSpan(13, 00, 00),
        new TimeSpan(14, 00, 00),
        new TimeSpan(15, 00, 00),
        new TimeSpan(16, 00, 00),
        new TimeSpan(17, 00, 00),
        new TimeSpan(18, 00, 00),
        new TimeSpan(19, 00, 00),
        new TimeSpan(20, 00, 00),
        new TimeSpan(21, 00, 00),
        new TimeSpan(22, 00, 00),
        new TimeSpan(23, 00, 00),
        new TimeSpan(23, 59, 00),
    };

    List<TimeSpan> TiemposConsulta = new List<TimeSpan>()
    {
        new TimeSpan(00, 30, 00),
        new TimeSpan(01, 00, 00),
    };


    void MostrarListaDePosiblesHorariosDisponibles()
    {

        TimeSpan JornadaLaboral = configuracionConsulta.HoraSalida - configuracionConsulta.HoraEntrada;

        var cantidadDeConsultas = (JornadaLaboral / configuracionConsulta.DuracionConsultas);

        CreateListHorariosDisponibles(cantidadDeConsultas, configuracionConsulta.HoraEntrada, configuracionConsulta.DuracionConsultas);
    }

    void CreateListHorariosDisponibles(double cantidadConsultasPosibles, TimeSpan HoraEntrada, TimeSpan DuracionConsulta)
    {
        var horaInicioConsulta = HoraEntrada;
        var horaFinConsulta = HoraEntrada;

        for (int i = 0; i < cantidadConsultasPosibles; i++)
        {
            horaFinConsulta += DuracionConsulta;

            var horarioConsulta = $"{horaInicioConsulta} - {horaFinConsulta}";

            var consulta = new ConsultasPorMedico() { HoraInicioCita = horaInicioConsulta, HoraFinCita = horaFinConsulta, EstaOcupado = false };
            ConsultasPorMedico.Add(consulta);

            horaInicioConsulta += DuracionConsulta;
        }
    }

    void CheckboxClicked(TimeSpan HoraInicioCita, object checkedValue)
    {
        if ((bool)checkedValue)
        {

            ConsultasPorMedico.FirstOrDefault(x => x.HoraInicioCita == HoraInicioCita).EstaOcupado = false;
        }
        else
        {
            ConsultasPorMedico.FirstOrDefault(x => x.HoraInicioCita == HoraInicioCita).EstaOcupado = true;
        }
    }

    private async Task GuardarJornadaLaboral()
    {
        configuracionConsulta.UsuarioId = UsuarioId;
        configuracionConsulta.HorariosDeConsulta = ConsultasPorMedico;

        var respuesta = await manager.Post<ConfiguracionConsulta, long>($"Medicos/GuardarJornadaLaboral", configuracionConsulta).ConfigureAwait(false);

        if (respuesta.Estatus == EstadosDeRespuesta.Correcto)
        {
            configuracionConsulta.ConfiguracionConsultaId = respuesta.Datos;
        }
        else
        {
            await js.InvokeVoidAsync("alert", respuesta.Mensaje);
            Console.WriteLine(respuesta.Datos);
        }
    }
}